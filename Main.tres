[gd_resource type="VisualShader" load_steps=12 format=2]

[sub_resource type="OpenSimplexNoise" id=1]

[sub_resource type="NoiseTexture" id=2]
seamless = true
noise = SubResource( 1 )

[sub_resource type="VisualShaderNodeTexture" id=3]
output_port_for_preview = 0
texture = SubResource( 2 )

[sub_resource type="VisualShaderNodeInput" id=4]
input_name = "uv"

[sub_resource type="VisualShaderNodeVectorOp" id=5]

[sub_resource type="VisualShaderNodeInput" id=6]
input_name = "time"

[sub_resource type="VisualShaderNodeScalarOp" id=7]

[sub_resource type="VisualShaderNodeExpression" id=8]
size = Vector2( 338, 312 )
expression = "output0 = sin(TIME)*0.5-0.5;
output1 = 1.0;
if(output0+input0 < 0.0){
output1 = 0.0;
}
output1 = output0+input0;"

[sub_resource type="VisualShaderNodeVectorOp" id=9]
default_input_values = [ 0, Vector3( 0, 0, 0 ), 1, Vector3( 1, 1, 1 ) ]
operator = 2

[sub_resource type="NoiseTexture" id=10]

[sub_resource type="VisualShaderNodeTexture" id=11]
texture = SubResource( 10 )
texture_type = 1

[resource]
code = "shader_type canvas_item;
uniform sampler2D tex_frg_2;



void vertex() {
// Output:0

}

void fragment() {
// Input:3
	vec3 n_out3p0 = vec3(UV, 0.0);

// Input:5
	float n_out5p0 = TIME;

// VectorOp:4
	vec3 n_out4p0 = n_out3p0 + vec3(n_out5p0);

// VectorOp:9
	vec3 n_in9p1 = vec3(1.00000, 1.00000, 1.00000);
	vec3 n_out9p0 = n_out4p0 * n_in9p1;

// Texture:2
	vec4 tex_frg_2_read = texture(tex_frg_2, n_out9p0.xy);
	vec3 n_out2p0 = tex_frg_2_read.rgb;
	float n_out2p1 = tex_frg_2_read.a;

// Expression:8
	float n_out8p0;
	float n_out8p1;
	n_out8p0 = 0.0;
	n_out8p1 = 0.0;
	{
		n_out8p0 = sin(TIME)*0.5-0.5;
		n_out8p1 = 1.0;
		if(n_out8p0+dot(n_out2p0, vec3(0.333333, 0.333333, 0.333333)) < 0.0){
		n_out8p1 = 0.0;
		}
		n_out8p1 = n_out8p0+dot(n_out2p0, vec3(0.333333, 0.333333, 0.333333));
	}

// ScalarOp:6
	float n_out6p0 = dot(n_out2p0, vec3(0.333333, 0.333333, 0.333333)) + n_out8p0;

// Output:0
	COLOR.rgb = vec3(n_out6p0);
	COLOR.a = n_out8p1;

}

void light() {
// Output:0

}
"
graph_offset = Vector2( 587.75, -91.5 )
mode = 1
flags/light_only = false
nodes/vertex/0/position = Vector2( 380, 40 )
nodes/vertex/2/node = SubResource( 11 )
nodes/vertex/2/position = Vector2( 140, 100 )
nodes/fragment/0/position = Vector2( 940, -40 )
nodes/fragment/2/node = SubResource( 3 )
nodes/fragment/2/position = Vector2( 260, -220 )
nodes/fragment/3/node = SubResource( 4 )
nodes/fragment/3/position = Vector2( -340, -120 )
nodes/fragment/4/node = SubResource( 5 )
nodes/fragment/4/position = Vector2( -120, -140 )
nodes/fragment/5/node = SubResource( 6 )
nodes/fragment/5/position = Vector2( -280, -20 )
nodes/fragment/6/node = SubResource( 7 )
nodes/fragment/6/position = Vector2( 680, -60 )
nodes/fragment/8/node = SubResource( 8 )
nodes/fragment/8/position = Vector2( 340, 80 )
nodes/fragment/8/size = Vector2( 338, 312 )
nodes/fragment/8/input_ports = "0,0,input0;"
nodes/fragment/8/output_ports = "0,0,output0;1,0,output1;"
nodes/fragment/8/expression = "output0 = sin(TIME)*0.5-0.5;
output1 = 1.0;
if(output0+input0 < 0.0){
output1 = 0.0;
}
output1 = output0+input0;"
nodes/fragment/9/node = SubResource( 9 )
nodes/fragment/9/position = Vector2( 60, -140 )
nodes/fragment/connections = PoolIntArray( 2, 0, 6, 0, 2, 0, 8, 0, 8, 0, 6, 1, 4, 0, 9, 0, 9, 0, 2, 0, 5, 0, 4, 1, 3, 0, 4, 0, 8, 1, 0, 1, 6, 0, 0, 0 )
